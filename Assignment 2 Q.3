# Q3 Fixing the error-prone codes.
# Below is the code (left) that is encrypted using a number. Once you decrypt the below code, it reveals the original code with many errors. Please fix them and explain them using comments (#).

# the Encrypter
# the key is 13. this was found by running a For loop from 1 -> 26 to show every possible outcome.
# loop 13 showed "tybony_inevnoyr" -> "global_variable" (this means the Encrypter is also the decrypter)
def encrypt(text, key):
    encrypted_text = ""
    for char in text:
        if char.isalpha():
            shifted = ord(char) + key
            if char.islower():
                if shifted > ord('z'):
                    shifted -= 26
                elif shifted < ord('a'):
                    shifted += 26
            elif char.isupper():
                if shifted > ord('Z'):
                    shifted -= 26
                elif shifted < ord('A'):
                    shifted += 26
            encrypted_text += chr(shifted)
        else:
            encrypted_text += char
    return encrypted_text

# Find the key
for i in range(26):
    print(f"try key {i+1}: ", encrypt("tybony_inevnoyr", i+1))

# print the new code and store in .txt file by decrypting existing code.
FE = open("encrypted_text.txt", 'r'); FD = open("decrypt_text.txt", 'w')
for line in FE:
    line = line.strip()
    print(encrypt(line,13))
    FD.write(encrypt(line,13) + "\n")
FE.close(); FD.close()

#new code to correct

global_variable = 100
my_dict = {'key1':'value1', 'key2':'value2', 'key3':'value3', 'key4':'value4'} # key4 was added due to referanced below.

def process_numbers(numbers):
    global global_variable
    local_variable = 10 # local_variable had no value was set to 10 same as below
    numbers = [1, 2, 3, 4, 5]

    while local_variable > 0:
        if local_variable % 2 == 0:
            numbers.remove(local_variable)
        local_variable -= 1

    return numbers

my_set = {1, 2, 3, 4, 5, 5, 4, 3, 2, 1}
result = process_numbers(my_set) # "process_numbers(numbers=my_set)" changed to "process_numbers(my_set)"

def modify_dict():
    local_variable = 10
    my_dict['key4'] = local_variable

modify_dict()

def update_global():
    global global_variable
    global_variable += 10

for i in range(5):
    print(i)
    i += 1

if my_set != None and my_dict['key4'] == 10: # 'my_set dose not none' changed to 'my_set != None'
    print("5 not found in the dictionary!")

print(global_variable)
print(my_dict)
print(my_set)
